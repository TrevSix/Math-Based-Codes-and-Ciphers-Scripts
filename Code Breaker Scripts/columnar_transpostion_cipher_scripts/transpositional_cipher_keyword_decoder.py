import math

def get_user_text() : #get user text and turn it into encrypted_text and key_array
    encrypted_text = input("Please enter encrypted text here:\n")
    encrypted_text = ''.join(char for char in encrypted_text if char.isalpha())
    key = input("Please enter keyword translated to numbers seperated by spaces here:\n" +
                    "i.e: Subtract -> abcrsttu -> 1 2 3 4 5 6 7 8 -> 5 8 2 6 4 1 3 7\n")
    key = list(key.split())
    key_array = []
    for char in key : # turn list(key) into array(int(key_array))
        char = int(char)
        key_array.append(char)


    decrypt(key_array, encrypted_text) # function call for decrypt

def decrypt(key, encrypted_text) :
    i = 0 # used to index an if statement below
  
    index = 0 # used to index key_list
  
    # track msg indexes 
    msg_indx = 0
    msg_len = float(len(encrypted_text)) 
    msg_list = list(encrypted_text) 
  
    # do math. num_of_column is len(key) and num_of_row is len(encrypted_text) / num_of_columns rounded up
    col = len(key) 
    row = int(math.ceil(msg_len / col)) 
    blocked_boxes = (row * col) - len(encrypted_text)
    
    key_list = sorted(list(key)) # turn key into key_list and put in alphabetical order
  
    deciphered = [] # make table

    for _ in range(row): 
        deciphered += [[None] * col] # make table 2d
  
    for _ in range(col): # populate table with letters in their positions on the grid
        curr_idx = key.index(key_list[index]) # use index to denote what letter of the keyword the for loop is on
        if blocked_boxes != 0 : # pad out list temporarily to avoid errors. this if loop took me 3 hours to figure out :(
            while i < blocked_boxes :
                deciphered[-1][-i - 1] = "_" # if for loop would overwrite a padded position, dont. <- old comment
                i += 1                       #  <- new comment. (Remove comment because it isnt necessary)
        for j in range(row): 
            if deciphered[j][curr_idx] == ("_") :
                j += 1
                if j >= row :
                    continue
            deciphered[j][curr_idx] = msg_list[msg_indx] # put letter in position :)
            msg_indx += 1 # increment to next letter in encrypted text
        index += 1 # increment to next letter in key
    deciphered = str(deciphered) # turn deciphered_text into str for parsing reasons
    deciphered = ''.join(char for char in deciphered if char.isalpha()) # get rid of any padding that was needed
    print(deciphered) # WOOOOOW!!!! Finished product!!!
    # convert decrypted msg matrix into a string 


get_user_text()

'''   
1 2 3 4 5 = OTOAKYOOGUCKRCAINNAGDKHCAIENSGCMRTEEGSASEUSOYRKEILENTEHEEXBTSRTEVSOINOFLWLIHIUTNNLGLAOEFHTSTMRASGADNOOOLDOIKWSTTHUOTOHCENNSATTOUESFTFLIHNYALGEUGAL
2 1 3 4 5 = LOOAKTYOGUOCRCAKINAGNDHCAKINSGECRTEMESASGESOYUREILKETEHNEXBTESTEVRSINOOFWLILHUTNINGLALOFHTESMRATSADNGOOLDOOKWSITHUOTTHCEONSATNTUESOFFLITHYALNGUGAE
3 2 1 4 5 = ELOAKOTYGUOOCCARKIAGNNDCAHKISGNECTERMEASSGEOYSURILEKEEHTNEBTXESEVTRSNOIOFLIWLHTNUINLAGLOHTFESRAMTSDNAGOLDOOOWSKITUOHTTCEHONATSNTESUOFLIFTHALYNGGAU
4 3 2 1 5 = UELOKAOTYUGOOCACRKIGANNDACHKIGSNECETRMESASGEYOSURLIEKEHETNETBXESVETRSONIOFILWLHNTUINALGLOTHFESARMTSNDAGODLOOOSWKITOUHTTECHONTASNTSEUOFILFTHLAYNGAG
5 4 3 2 1 = GUELOKAOTYUGOOCACRKIGANNDACHKIGSNECETRMESASGEYOSURLIEKEHETNETBXESVETRSONIOFILWLHNTUINALGLOTHFESARMTSNDAGODLOOOSWKITOUHTTECHONTASNTSEUOFILFTHLAYNGA
1 3 2 4 5 = OOTAKYOOGUCRKCAINNAGDHKCAINESGCRMTEESGASESUOYREKILETNEHEXEBTSTREVSIONOFWLLIHUITNNGLLAOFEHTSMTRASAGDNOOOLDOKIWSTHTUOTHOCENSNATTUOESFFTLIHYNALGUEGAL
1 3 4 2 5 = OOATKYOGOUCRCKAINANGDHCKAINSEGCRTMEESAGSESOUYREIKLETENHEXBETSTERVSINOOFWLLIHUTINNGLLAOFHETSMRTASADGNOOLODOKWISTHUTOTHCOENSANTTUEOSFFLTIHYANLGUGEAL
1 3 4 5 2 = OOAKTYOGUOCRCAKINAGNDHCAKINSGECRTEMESASGESOYUREILKETEHNEXBTESTEVRSINOOFWLILHUTNINGLALOFHTESMRATSADNGOOLDOOKWSITHUOTTHCEONSATNTUESOFFLITHYALNGUGAEL
3 1 2 4 5 = EOLAKOYTGUOCOCARIKAGNDNCAHIKSGNCETEREMASSEGOYSRUILEEKEHTENBTXSEEVTSRNOIFOLIWHLTNUNILAGOLHTFSERAMSTDNAOGLDOOOWSKTIUOHTTCEHNOATSTNESUFOLIFHTALYGNGAU
1 2 4 3 5 = OTAOKYOGOUCKCRAINANGDKCHAIESNGCMTREEGASSEUOSYRKIELENETHEEBXTSRETVSONIOFLLWIHITUNNLLGAOEHFTSTRMASGDANOOLODOIWKSTTUHOTOCHENNASTTOEUSFTLFIHNAYLGEGUAL
1 2 4 5 3 = OTAKOYOGUOCKCARINAGNDKCAHIESGNCMTEREGASSEUOYSRKILEENEHTEEBTXSREVTSONOIFLLIWHITNUNLLAGOEHTFSTRAMSGDNAOOLDOOIWSKTTUOHTOCEHNNATSTOESUFTLIFHNALYGEGAUL
4 1 2 3 5 = UOLEKAYTOUGCOOACIKRGADNNACIKHGSCENETEMRSAEGSYORUSLIEKEHEENTTBSEXVESRTONFOIILHLWNTNIUALOLGTHSEFARSTMNDOGADLOOOSWTIKOUTTHECNOHTATNSSEFOUILHTFLAGNYAG
1 4 2 3 5 = OATOKYGOOUCCKRAIANNGDCKHAISENGCTMREEAGSSEOUSYRIKELEENTHEBEXTSERTVSNOIOFLLWIHTIUNNLLGAOHEFTSRTMASDGANOLOODOWIKSTUTHOTCOHENANSTTEOUSFLTFIHANYLGGEUAL
1 2 3 5 4 = OTOKAYOOUGCKRACINNGADKHACIENGSCMRETEGSSAEUSYORKELIENTHEEEXTBSRTVESOIONFLWILHIUNTNLGALOEFTHSTMARSGANDOOODLOIKSWTTHOUTOHECNNSTATOUSEFTFILHNYLAGEUAGL
5 1 2 3 4 = GOLEUKYTOAUCOOGAIKRCGDNNAAIKHCGCENSEEMRTSEGSAYRUSOLEKEIHENTETSEXBVSRTEOFOINIHLWLNNIUTAOLGLTSEFHASTMRNOGADDOOOLSTIKWOTTHUENOHCTTNSASFOUEIHTFLLGNYAA
1 5 2 3 4 = OKTOAYUOOGCAKRCIGNNADAKHCIGENSCEMRTESGSAEYUSORLKEIEHNTEETEXBSVRTESOOINFILWLHNIUTNALGLOTEFHSATMRSNGADODOOLOSIKWTOTHUTEOHCNTNSATSOUEFITFLHLNYAGAEUGL
1 2 5 3 4 = OTKOAYOUOGCKARCINGNADKAHCIEGNSCMERTEGSSAEUYSORKLEIENHTEEETXBSRVTESOOINFLIWLHINUTNLAGLOETFHSTAMRSGNADOODOLOISKWTTOHUTOEHCNNTSATOSUEFTIFLHNLYAGEAUGL
1 2 3 5 4 = OTOKAYOOUGCKRACINNGADKHACIENGSCMRETEGSSAEUSYORKELIENTHEEEXTBSRTVESOIONFLWILHIUNTNLGALOEFTHSTMARSGANDOOODLOIKSWTTHOUTOHECNNSTATOUSEFTFILHNYLAGEUAGL
2 1 4 3 5 = LOAOKTYGOUOCCRAKIANGNDCHAKISNGECTREMEASSGEOSYURIELKEETHNEBXTESETVRSNIOOFLWILHTUNINLGALOHFTESRMATSDANGOLODOOWKSITUHOTTCHEONASTNTEUSOFLFITHAYLNGGUAE
2 1 3 5 4 = LOOKATYOUGOCRACKINGANDHACKINGSECRETMESSAGESYOURELIKETHENEXTBESTVERSIONOFWILLHUNTINGALLOFTHESMARTSANDGOODLOOKSWITHOUTTHECONSTANTUSEOFFILTHYLANGUAGE

'''